#1
import pandas as pd
import matplotlib.pyplot as plt

# Upload CSV file
file = input("Enter CSV file path: ")
df = pd.read_csv(file)

# Basic info
print("\n--- Basic Info ---")
print(df.info())

# Statistical description
print("\n--- Statistical Description ---")
print(df.describe())

# Visualize with histograms
df.hist(figsize=(10, 6))
plt.show()


#2
import pandas as pd

file = input("Enter CSV file path: ")
df = pd.read_csv(file)

# Handle missing values
df = df.fillna(df.mean())  # Fill numeric NaNs with mean

# Encode categorical variables
df = pd.get_dummies(df)

# Normalize numeric columns
df = (df - df.min()) / (df.max() - df.min())

print("Preprocessed Data:")
print(df.head())

#3
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
import matplotlib.pyplot as plt

file = input("Enter CSV file path: ")
df = pd.read_csv(file)

X = df.iloc[:, :-1]  # Features
y = df.iloc[:, -1]   # Target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

model = DecisionTreeClassifier()
model.fit(X_train, y_train)

print("Accuracy:", model.score(X_test, y_test))

# Visualize tree
plt.figure(figsize=(10,6))
plot_tree(model, filled=True, feature_names=X.columns)
plt.show()

#4
import pandas as pd
from mlxtend.frequent_patterns import apriori, association_rules

file = input("Enter CSV file path: ")
df = pd.read_csv(file)

# Assume data is one-hot encoded (True/False or 0/1)
frequent_items = apriori(df, min_support=0.3, use_colnames=True)
print("Frequent Itemsets:")
print(frequent_items)

rules = association_rules(frequent_items, metric="lift", min_threshold=1)
print("Association Rules:")
print(rules)

#5
import pandas as pd
from mlxtend.frequent_patterns import fpgrowth, association_rules

file = input("Enter CSV file path: ")
df = pd.read_csv(file)

frequent_items = fpgrowth(df, min_support=0.3, use_colnames=True)
print("Frequent Itemsets:")
print(frequent_items)

rules = association_rules(frequent_items, metric="lift", min_threshold=1)
print("Association Rules:")
print(rules)

#6
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

file = input("Enter CSV file path: ")
df = pd.read_csv(file)

X = df.iloc[:, :-1]
y = df.iloc[:, -1]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

model = LinearRegression()
model.fit(X_train, y_train)

print("R^2 Score:", model.score(X_test, y_test))

# Plot first feature vs target
plt.scatter(X_test.iloc[:, 0], y_test, color='blue')
plt.plot(X_test.iloc[:, 0], model.predict(X_test), color='red')
plt.xlabel("Feature")
plt.ylabel("Target")
plt.show()

#7
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB

file = input("Enter CSV file path: ")
df = pd.read_csv(file)

X = df.iloc[:, :-1]
y = df.iloc[:, -1]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

model = GaussianNB()
model.fit(X_train, y_train)

print("Accuracy:", model.score(X_test, y_test))
